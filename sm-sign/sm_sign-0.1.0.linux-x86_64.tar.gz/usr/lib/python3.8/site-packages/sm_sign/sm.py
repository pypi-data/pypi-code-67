# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _mod_sm
else:
    import _mod_sm

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def SM3(data):
    return _mod_sm.SM3(data)

def generate_SM2_key_files(pub_keyfile, pri_keyfile, passwd):
    return _mod_sm.generate_SM2_key_files(pub_keyfile, pri_keyfile, passwd)

def SM2_SIGN(data, privkey):
    return _mod_sm.SM2_SIGN(data, privkey)

def SM2_VERIFY(data, sig, pubkey):
    return _mod_sm.SM2_VERIFY(data, sig, pubkey)

def pkcs7_sign(x509, privkey, cert_sf):
    return _mod_sm.pkcs7_sign(x509, privkey, cert_sf)

def pkcs7_verify(p7s, data):
    return _mod_sm.pkcs7_verify(p7s, data)

def init():
    return _mod_sm.init()

def read_private_key(file_name, passwd):
    return _mod_sm.read_private_key(file_name, passwd)

def read_public_key(file_name):
    return _mod_sm.read_public_key(file_name)

def generate_x509(pkey, request, x509_file):
    return _mod_sm.generate_x509(pkey, request, x509_file)

def write_pkcs8(filename, pkey, passwd):
    return _mod_sm.write_pkcs8(filename, pkey, passwd)

def read_pkcs8(file_name):
    return _mod_sm.read_pkcs8(file_name)


